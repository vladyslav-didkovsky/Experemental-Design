{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Portfolio Exercise: Starbucks\n",
    "### Table of Contents:\n",
    "\n",
    "- [Background Information](#Back)\n",
    "- [Part I](#Part1)\n",
    "    - [Part I Conclusion](#Part1Conc)\n",
    "- [Part II](#Part2)\n",
    "    - [Part II Conclusion](#Part2Conc)\n",
    "- [Part III](#Part3)\n",
    "    - [Part III Conclusion](#Part3Conc)\n",
    "- [Model Creation/Testing](#Part4)\n",
    "    - [Model Conclusion](#Part4Conc)\n",
    "\n",
    "\n",
    "\n",
    "<a id=\"Back\"></a>\n",
    "### Background Information\n",
    "\n",
    "This dataset was originally used as a take-home assignment provided by Starbucks for their job candidates. The data for this exercise consists of about 120,000 data points split in a 2:1 ratio among training and test files. In the experiment simulated by the data, an advertising promotion was tested to see if it would bring more customers to purchase a specific product priced at $10. Since it costs the company 0.15 to send out each promotion, it would be best to limit that promotion only to those that are most receptive to the promotion. Each data point includes one column indicating whether or not an individual was sent a promotion for the product, and one column indicating whether or not that individual eventually purchased that product. Each individual also has seven additional features associated with them, which are provided abstractly as V1-V7.\n",
    "\n",
    "#### Optimization Strategy\n",
    "\n",
    "Our task is to use the training data to understand what patterns in V1-V7 to indicate that a promotion should be provided to a user. Specifically, the goal is to maximize the following metrics:\n",
    "\n",
    "* **Incremental Response Rate (IRR)** \n",
    "\n",
    "IRR depicts how many more customers purchased the product with the promotion, as compared to if they didn't receive the promotion. Mathematically, it's the ratio of the number of purchasers in the promotion group to the total number of customers in the purchasers group (_treatment_) minus the ratio of the number of purchasers in the non-promotional group to the total number of customers in the non-promotional group (_control_).\n",
    "\n",
    "$$ IRR = \\frac{purch_{treat}}{cust_{treat}} - \\frac{purch_{ctrl}}{cust_{ctrl}} $$\n",
    "\n",
    "\n",
    "* **Net Incremental Revenue (NIR)**\n",
    "\n",
    "NIR depicts how much is made (or lost) by sending out the promotion. Mathematically, this is 10 times the total number of purchasers that received the promotion minus 0.15 times the number of promotions sent out, minus 10 times the number of purchasers who were not given the promotion.\n",
    "\n",
    "$$ NIR = (10\\cdot purch_{treat} - 0.15 \\cdot cust_{treat}) - 10 \\cdot purch_{ctrl}$$\n",
    "\n",
    "For a full description of what Starbucks provides to candidates see the [instructions available here](https://drive.google.com/open?id=18klca9Sef1Rs6q8DW4l7o349r8B70qXM).\n",
    "\n",
    "Below you can find the training data provided.  Explore the data and different optimization strategies.\n",
    "\n",
    "#### How To Test Your Strategy?\n",
    "\n",
    "We will complete the `promotion_strategy` function to pass to the `test_results` function. This will test our optimization strategy.   \n",
    "From past data, we know there are four possible outomes:\n",
    "\n",
    "Table of actual promotion vs. predicted promotion customers:  \n",
    "\n",
    "<table>\n",
    "<tr><th></th><th colspan = '2'>Actual</th></tr>\n",
    "<tr><th>Predicted</th><th>Yes</th><th>No</th></tr>\n",
    "<tr><th>Yes</th><td>I</td><td>II</td></tr>\n",
    "<tr><th>No</th><td>III</td><td>IV</td></tr>\n",
    "</table>\n",
    "\n",
    "The metrics are only being compared for the individuals we predict should obtain the promotion â€“ that is, quadrants I and II.  Since the first set of individuals that receive the promotion (in the training set) receive it randomly, we can expect that quadrants I and II will have approximately equivalent participants.  \n",
    "\n",
    "Comparing quadrant I to II then gives an idea of how well your promotion strategy will work in the future. \n",
    "\n",
    "We will start by reading in the data below.  See how each variable or combination of variables along with a promotion influences the chance of purchasing.  \n",
    "\n",
    "**Let's Go!**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Promotion</th>\n",
       "      <th>purchase</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>30.443518</td>\n",
       "      <td>-1.165083</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>32.159350</td>\n",
       "      <td>-0.645617</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>30.431659</td>\n",
       "      <td>0.133583</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.588914</td>\n",
       "      <td>-0.212728</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>28.044332</td>\n",
       "      <td>-0.385883</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID Promotion  purchase  V1         V2        V3  V4  V5  V6  V7\n",
       "0   1        No         0   2  30.443518 -1.165083   1   1   3   2\n",
       "1   3        No         0   3  32.159350 -0.645617   2   3   2   2\n",
       "2   4        No         0   2  30.431659  0.133583   1   1   4   2\n",
       "3   5        No         0   0  26.588914 -0.212728   2   1   4   2\n",
       "4   8       Yes         0   3  28.044332 -0.385883   1   1   2   2"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# load in packages\n",
    "from itertools import combinations\n",
    "\n",
    "from test_results import test_results, score\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import scipy as sp\n",
    "import sklearn as sk\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn import preprocessing\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sb\n",
    "%matplotlib inline\n",
    "\n",
    "# load in the data\n",
    "train_data = pd.read_csv('./training.csv')\n",
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(84534, 10)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"Part1\"></a>\n",
    "### Part I. \n",
    "My first step will be to analyze our invariant metric of number of participants in our control and experiment (i.e those who recieved a promotional offer vs those who did not)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hypothesis:\n",
    "$$H_{0}: Exp_{particiapants} - Control_{participants} = 0$$\n",
    "$$H_{a}: Exp_{participants} - Control_{participants} > 0$$\n",
    "$$\\alpha = 0.05$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number who received the promotion: 42364 and the number who did not: 42170.\n"
     ]
    }
   ],
   "source": [
    "# Checking the number of individuals in each group\n",
    "print(\"The number who received the promotion: {} and the number who did not: {}.\".format((train_data.Promotion == \"Yes\").sum(),(train_data.Promotion == \"No\").sum()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculating a measurable statistic in the difference of our group sizes\n",
    "Promotion_avg = ((train_data.Promotion == \"Yes\").sum())/train_data.shape[0]\n",
    "Non_Promotion_avg = (train_data.Promotion == \"No\").sum()/train_data.shape[0]\n",
    "sample_difference = Promotion_avg - Non_Promotion_avg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Bootstraping our differences to get a model of the distribution for our null\n",
    "differences = []\n",
    "for _ in range(10000):\n",
    "    bootsamp = train_data.sample(30000, replace=True)\n",
    "    Promotion_avg = ((bootsamp.Promotion == \"Yes\").sum())/bootsamp.shape[0]\n",
    "    Non_Promotion_avg = (bootsamp.Promotion == \"No\").sum()/bootsamp.shape[0]\n",
    "    differences.append(Promotion_avg - Non_Promotion_avg)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualistion of our distribution \n",
    "plt.hist(differences)\n",
    "plt.title('Normal Distribution of sampling differences');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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dOhAnz59aN++fUsXxSwXWm2gr66uZquttmLAgAF8/LwAy7uIYNmyZVRXV7Pddtu1dHHMcqHVdt28//77dO/e3UG+jZFE9+7dfSRnVkatNtADDvJtlL93s/Jq1YHezMyazoF+I6qrqxk1ahQDBw5k++23Z/z48Xz4YfaIyxtvvJEf/OAHLVzCT+rUqVPR9EsuuYRBgwax6667MmTIEB577DEArrrqKlavXl30M4Vq5xs5ciQrVhR7YmHj8ptZ5TjQ1yEiOPLIIzn88MOZN28e//znP1m1ahUTJkyo2DLXrl1bkfk++uij3HXXXcyaNYunn36a++67j759s6e2NTbQ33PPPXTpUuwZ5I3L31oNOOfuoi+zTYkDfR1mzJhBhw4dOPnkkwFo164dV155JTfccMP6ALZw4UKGDRvGwIEDufDCCwF49913OeSQQxg8eDBf/OIXmTo1e7jSzJkz2Xfffdl999058MADWbJkCQDDhg3jzDPPpKqqiksuuYT+/fuzbt269fPq27cva9as4cUXX+Sggw5i991356tf/SovvPACAC+//DJ77703u+yyC+edd17RdVmyZAk9evRgiy22AKBHjx706tWLa665hsWLFzN8+HCGDx8OwKmnnkpVVRWDBg3iggsuACiab8CAAbz55ptF13dj+QGmTJnCrrvuyuDBgznhhBPK9ZWZWR1a7eWVGzjzTJg9u7zzHDIErrqqzslz5sxh99133yBt6623pl+/fsyfnz0E5/HHH+fZZ5+lY8eO7LHHHhxyyCEsWLCAXr16cffdWatv5cqVrFmzhtNPP50777yTnj17MnXqVCZMmMANN9wAwIcffrj+Xj+zZs3iL3/5C8OHD+euu+7iwAMPpH379owbN47rrruOgQMH8thjj3HaaacxY8YMxo8fz6mnnsqJJ57Ir371q6LrcsABB3DRRRex44478rWvfY0xY8aw7777csYZZ3DFFVfwwAMP0KNHDyDr4unWrRsfffQRI0aM4Omnny6ar8af/vSnT6xv586d68w/Z84cJk6cyCOPPEKPHj1Yvnx5SV+XmTVeSS16Sa9IekbSbElPprRukqZLmpfeu6Z0SbpG0nxJT0varZIr0JL2339/unfvzqc//WmOPPJIHnroIXbZZRemT5/O2Wefzd/+9jc6d+7M3LlzefbZZ9l///0ZMmQIEydOpLq6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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# distribution of our null hypothesis\n",
    "null_vals = np.random.normal(0, np.std(differences), 10000)\n",
    "plt.hist(null_vals, bins=60)\n",
    "plt.axvline(sample_difference, color='r', label =\"Observed Statistic\")\n",
    "plt.legend(loc='upper left')\n",
    "plt.title(\"Normal Distribution under the Null Hypothesis\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.00229493458253488"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_difference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6525"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Determining the signifigance of our result \n",
    "p_val = (sample_difference>null_vals).mean()\n",
    "p_val"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"Part1Conc\"></a>\n",
    "#### Part I. Conclusion \n",
    "Our P value is well within our confidence interval and therefore we **fail to reject the null hypothesis**. This implies that there is no statistical signifigance in the difference of our sampling populations. Awesome! Now, lets move forward with the analysis :) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"Part2\"></a>\n",
    "### Part II. Analyzing NIR Effect\n",
    "Below we shall determine if the experiment had a positive effect on the NIR metric. \n",
    "Hypothesis:\n",
    "$$H_{0}:Net Incremental Revenue = 0$$\n",
    "$$H_{a}:Net Incremental Revenue > 0$$\n",
    "$$\\alpha = 0.05$$\n",
    "Our *Alpha value* with the Bonferroni Correction:\n",
    "$$Bonferroni Correction = \\frac{\\alpha}{number-of-measures} = 0.025$$\n",
    "\n",
    "Where: \n",
    "\n",
    "$$ NIR = (10\\cdot purch_{treat} - 0.15 \\cdot cust_{treat}) - 10 \\cdot purch_{ctrl}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2334.5999999999995"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Finding our observed statistic \n",
    "purchase_treatment = train_data[train_data['Promotion'] == \"Yes\"].purchase.sum()\n",
    "customer_treatment = train_data[train_data['Promotion'] == \"Yes\"].shape[0]\n",
    "purchase_control = train_data[train_data['Promotion'] == \"No\"].purchase.sum()\n",
    "NIR = (10*purchase_treatment - 0.15*customer_treatment)-10*purchase_control\n",
    "NIR\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Bootstraping our differences to get a model of the distribution for our null\n",
    "NIRs = []\n",
    "for _ in range(10000):\n",
    "    bootsample = train_data.sample(30000, replace=True)\n",
    "    purchase_treatment = bootsample[bootsample['Promotion'] == \"Yes\"].purchase.sum()\n",
    "    customer_treatment = bootsample[bootsample['Promotion'] == \"Yes\"].shape[0]\n",
    "    purchase_control = bootsample[bootsample['Promotion'] == \"No\"].purchase.sum()\n",
    "    NIRs.append((10*purchase_treatment - 0.15*customer_treatment)-10*purchase_control)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# distribution of our null hypothesis\n",
    "null_NIRs = np.random.normal(0, np.std(NIRs), 10000)\n",
    "plt.hist(null_NIRs, bins=60)\n",
    "plt.title(\"Normal Distribution under the Null Hypothesis\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting under the null \n",
    "plt.axvline(NIR, color='r', label =\"Observed Statistic\")\n",
    "null_NIRs = np.random.normal(0, np.std(NIRs), 10000)\n",
    "plt.hist(null_NIRs, bins=60)\n",
    "plt.title(\"Normal Distribution under the Null Hypothesis\")\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the signifigane is 0\n",
    "pval = (NIR>null_NIRs).mean()\n",
    "pval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Curious check to ensure all the data under the null lies above our observed statistic\n",
    "pval2 = (NIR<null_NIRs).mean()\n",
    "pval2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"Part2Conc\"></a>\n",
    "#### Part II. Conclusion \n",
    "Our P value is well below our confidence interval and therefore we **fail to reject our null hypothesis**. This implies that there is no statistical signifigant increase in NIR (what we want to optimise). However, our data indicates we signifigantly REDUCED the NIR with this campaign. Not what we want...\n",
    "<a id=\"Part3\"></a>\n",
    "### Part III. Analyzing IIR Effect\n",
    "Below we shall determine if the experiment had a positive effect on the IIR metric. \n",
    "Hypothesis:\n",
    "$$H_{0}:Incremental Response Rate = 0$$\n",
    "$$H_{a}:Incremental Response Rate > 0$$\n",
    "$$\\alpha = 0.025$$\n",
    "\n",
    "Where:\n",
    "$$ IRR = \\frac{purch_{treat}}{cust_{treat}} - \\frac{purch_{ctrl}}{cust_{ctrl}} $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Promotion</th>\n",
       "      <th>purchase</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>30.443518</td>\n",
       "      <td>-1.165083</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>32.159350</td>\n",
       "      <td>-0.645617</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>30.431659</td>\n",
       "      <td>0.133583</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.588914</td>\n",
       "      <td>-0.212728</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>28.044332</td>\n",
       "      <td>-0.385883</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID Promotion  purchase  V1         V2        V3  V4  V5  V6  V7\n",
       "0   1        No         0   2  30.443518 -1.165083   1   1   3   2\n",
       "1   3        No         0   3  32.159350 -0.645617   2   3   2   2\n",
       "2   4        No         0   2  30.431659  0.133583   1   1   4   2\n",
       "3   5        No         0   0  26.588914 -0.212728   2   1   4   2\n",
       "4   8       Yes         0   3  28.044332 -0.385883   1   1   2   2"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.009454547819772702"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Finding our observed statistic \n",
    "purchase_treatment = train_data[train_data['Promotion'] == \"Yes\"].purchase.sum()\n",
    "customer_treatment = train_data[train_data['Promotion'] == \"Yes\"].shape[0]\n",
    "purchase_control = train_data[train_data['Promotion'] == \"No\"].purchase.sum()\n",
    "customer_control = train_data[train_data['Promotion'] == \"No\"].shape[0]\n",
    "IRR = purchase_treatment/customer_treatment - purchase_control/customer_control\n",
    "IRR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Bootstraping our differences to get a model of the distribution for our null\n",
    "IRRs = []\n",
    "for _ in range(10000):\n",
    "    bootsample2 = train_data.sample(30000, replace=True)\n",
    "    purchase_treatment = bootsample2[bootsample2['Promotion'] == \"Yes\"].purchase.sum()\n",
    "    customer_treatment = bootsample2[bootsample2['Promotion'] == \"Yes\"].shape[0]\n",
    "    purchase_control = bootsample2[bootsample2['Promotion'] == \"No\"].purchase.sum()\n",
    "    customer_control = bootsample2[bootsample2['Promotion'] == \"No\"].shape[0]\n",
    "    IRR_boot = purchase_treatment/customer_treatment - purchase_control/customer_control\n",
    "    IRRs.append(IRR_boot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# distribution of our null hypothesis\n",
    "null_IRRs = np.random.normal(0, np.std(IRRs), 10000)\n",
    "plt.hist(null_vals, bins=60)\n",
    "plt.title(\"Normal Distribution under the Null Hypothesis\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Reviewing our observed statistic against the bootstrapped sample\n",
    "plt.axvline(IRR, color='r', label =\"Observed Statistic\")\n",
    "null_IRRs = np.random.normal(0, np.std(IRRs), 10000)\n",
    "plt.hist(null_IRRs, bins=60)\n",
    "plt.title(\"Normal Distribution under the Null Hypothesis\")\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating the signifigance of this result \n",
    "pval_IRR = (IRR>null_IRRs).mean()\n",
    "pval_IRR"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"Part3Conc\"></a>\n",
    "#### Part III. Conclusion \n",
    "Our P value is well above our null distribution and therefore we **reject the null hypothesis**. This implies that there is a statistical increase in IRR between our control and experiemental group. So, we can see that our campaign does have a positive affect on the number of customers who purchased the product with the promotion, as compared to if they didn't receive the promotion. \n",
    "<a id=\"Part4\"></a>\n",
    "### Part IV. Model Creation \n",
    "Here we shall a model that can accuractely predict if a customer will be responsive to the campaign. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Promotion</th>\n",
       "      <th>purchase</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>30.443518</td>\n",
       "      <td>-1.165083</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>32.159350</td>\n",
       "      <td>-0.645617</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>30.431659</td>\n",
       "      <td>0.133583</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.588914</td>\n",
       "      <td>-0.212728</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>28.044332</td>\n",
       "      <td>-0.385883</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID Promotion  purchase  V1         V2        V3  V4  V5  V6  V7\n",
       "0   1        No         0   2  30.443518 -1.165083   1   1   3   2\n",
       "1   3        No         0   3  32.159350 -0.645617   2   3   2   2\n",
       "2   4        No         0   2  30.431659  0.133583   1   1   4   2\n",
       "3   5        No         0   0  26.588914 -0.212728   2   1   4   2\n",
       "4   8       Yes         0   3  28.044332 -0.385883   1   1   2   2"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(84534, 10)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Promotion\n",
       "No     319\n",
       "Yes    721\n",
       "Name: purchase, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reviewing the number of individuals who purchased products in both the control and experiment condition \n",
    "train_data.groupby('Promotion').purchase.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Copying the dataframe over \n",
    "data_exp = train_data.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# only considering the experiment group for our model training \n",
    "data_exp = data_exp[data_exp['Promotion']==\"Yes\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping the irrelavant columns \n",
    "data_exp.drop(['ID','Promotion'], axis = 1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42364, 8)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the shape is correct\n",
    "data_exp.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>purchase</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>28.044332</td>\n",
       "      <td>-0.385883</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>31.930423</td>\n",
       "      <td>0.393317</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>32.770916</td>\n",
       "      <td>-1.511395</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>36.957009</td>\n",
       "      <td>0.133583</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>36.911714</td>\n",
       "      <td>-0.905350</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    purchase  V1         V2        V3  V4  V5  V6  V7\n",
       "4          0   3  28.044332 -0.385883   1   1   2   2\n",
       "8          0   2  31.930423  0.393317   2   3   1   2\n",
       "10         0   1  32.770916 -1.511395   2   1   4   1\n",
       "12         0   1  36.957009  0.133583   2   3   1   1\n",
       "14         0   3  36.911714 -0.905350   2   2   4   1"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Viewing our data again \n",
    "data_exp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting our data into predictors and target variables\n",
    "X = data_exp.drop(['purchase'],axis=1)\n",
    "y = data_exp.purchase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/sklearn/preprocessing/data.py:323: DataConversionWarning: Data with input dtype int64, float64 were all converted to float64 by MinMaxScaler.\n",
      "  return self.partial_fit(X, y)\n"
     ]
    }
   ],
   "source": [
    "# Scaling our inputs \n",
    "min_max_scaler = preprocessing.MinMaxScaler()\n",
    "X = min_max_scaler.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=None,\n",
       "            oob_score=False, random_state=None, verbose=0,\n",
       "            warm_start=False)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Instantiating our model and fitting it\n",
    "clf = RandomForestClassifier(n_estimators=100)\n",
    "clf.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Promotion</th>\n",
       "      <th>purchase</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>41.376390</td>\n",
       "      <td>1.172517</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>25.163598</td>\n",
       "      <td>0.653050</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>26.553778</td>\n",
       "      <td>-1.597972</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>28.529691</td>\n",
       "      <td>-1.078506</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>32.378538</td>\n",
       "      <td>0.479895</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID Promotion  purchase  V1         V2        V3  V4  V5  V6  V7\n",
       "0   2        No         0   1  41.376390  1.172517   1   1   2   2\n",
       "1   6       Yes         0   1  25.163598  0.653050   2   2   2   2\n",
       "2   7       Yes         0   1  26.553778 -1.597972   2   3   4   2\n",
       "3  10        No         0   2  28.529691 -1.078506   2   3   2   2\n",
       "4  12        No         0   2  32.378538  0.479895   2   2   1   2"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Loading in our test data \n",
    "test_data = pd.read_csv('./test.csv')\n",
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tailoring the test data to test our model \n",
    "data_exp_test = train_data.copy()\n",
    "data_exp_test = data_exp_test[data_exp_test['Promotion']==\"Yes\"]\n",
    "data_exp_test.drop(['ID','Promotion'], axis = 1, inplace=True)\n",
    "X_test = data_exp_test.drop(['purchase'],axis=1)\n",
    "y_test = data_exp_test.purchase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/sklearn/preprocessing/data.py:323: DataConversionWarning: Data with input dtype int64, float64 were all converted to float64 by MinMaxScaler.\n",
      "  return self.partial_fit(X, y)\n"
     ]
    }
   ],
   "source": [
    "# Scaling our test input \n",
    "X_test = min_max_scaler.fit_transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predicting our target values\n",
    "y_pred = clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Our accuracy for the random forest model was 0.99991%\n"
     ]
    }
   ],
   "source": [
    "# Checking our accuracy for the model \n",
    "accuracy = (y_pred == y_test).mean()\n",
    "print(\"Our accuracy for the random forest model was {0:.5f}%\".format(accuracy))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Creating a confusion matrix visual\n",
    "\n",
    "confusion_matrix = confusion_matrix(y_test, y_pred)\n",
    "classes = ['No','Yes']\n",
    "confusion_matrix  = confusion_matrix.astype('float') / confusion_matrix.sum(axis=1)[:, np.newaxis]\n",
    "fig, ax = plt.subplots()\n",
    "im = ax.imshow(confusion_matrix, interpolation='nearest', cmap=plt.cm.Blues)\n",
    "ax.figure.colorbar(im, ax=ax)\n",
    "# We want to show all ticks...\n",
    "ax.set(xticks=np.arange(confusion_matrix.shape[1]),\n",
    "        yticks=np.arange(confusion_matrix.shape[0]),\n",
    "        # ... and label them with the respective list entries\n",
    "        xticklabels=classes, yticklabels=classes,\n",
    "        title=\"Confusion Matrix\",\n",
    "        ylabel='True label',\n",
    "        xlabel='Predicted label')\n",
    "\n",
    "# Rotate the tick labels and set their alignment.\n",
    "plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n",
    "            rotation_mode=\"anchor\")\n",
    "\n",
    "fmt = '.4f'\n",
    "thresh = confusion_matrix.max() / 2.\n",
    "for i in range(confusion_matrix.shape[0]):\n",
    "    for j in range(confusion_matrix.shape[1]):\n",
    "        ax.text(j, i, format(confusion_matrix[i, j], fmt),\n",
    "                ha=\"center\", va=\"center\",\n",
    "                color=\"white\" if confusion_matrix[i, j] > thresh else \"black\")\n",
    "fig.tight_layout()\n",
    "ax;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Converting our numeric outputs to Yes/No's \n",
    "promotion_yes_no = []\n",
    "for value in y_pred:\n",
    "    if value == 0:\n",
    "        promotion_yes_no.append(\"No\")\n",
    "    if value == 1:\n",
    "        promotion_yes_no.append(\"Yes\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['No', 'No', 'No', ..., 'No', 'No', 'No'], dtype='<U3')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Converting to a NumPy Array \n",
    "np.asarray(promotion_yes_no)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating the function to pass to our test_results function\n",
    "def promotion_strategy(df):\n",
    "    '''\n",
    "    INPUT \n",
    "    df - a dataframe with *only* the columns V1 - V7 (same as train_data)\n",
    "\n",
    "    OUTPUT\n",
    "    promotion_df - np.array with the values\n",
    "                   'Yes' or 'No' related to whether or not an \n",
    "                   individual should recieve a promotion \n",
    "                   should be the length of df.shape[0]\n",
    "                \n",
    "    Ex:\n",
    "    INPUT: df\n",
    "    \n",
    "    V1\tV2\t  V3\tV4\tV5\tV6\tV7\n",
    "    2\t30\t-1.1\t1\t1\t3\t2\n",
    "    3\t32\t-0.6\t2\t3\t2\t2\n",
    "    2\t30\t0.13\t1\t1\t4\t2\n",
    "    \n",
    "    OUTPUT: promotion\n",
    "    \n",
    "    array(['Yes', 'Yes', 'No'])\n",
    "    indicating the first two users would recieve the promotion and \n",
    "    the last should not.\n",
    "    '''\n",
    "    df = min_max_scaler.fit_transform(df)\n",
    "    \n",
    "    y_pred = clf.predict(df)\n",
    "    \n",
    "    promotion_yes_no = []\n",
    "    for value in y_pred:\n",
    "        if value == 0:\n",
    "            promotion_yes_no.append(\"No\")\n",
    "        if value == 1:\n",
    "            promotion_yes_no.append(\"Yes\")\n",
    "            \n",
    "    promotion = np.asarray(promotion_yes_no)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    return promotion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/sklearn/preprocessing/data.py:323: DataConversionWarning: Data with input dtype int64, float64 were all converted to float64 by MinMaxScaler.\n",
      "  return self.partial_fit(X, y)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nice job!  See how well your strategy worked on our test data below!\n",
      "\n",
      "Your irr with this strategy is 0.0476.\n",
      "\n",
      "Your nir with this strategy is 6.85.\n",
      "We came up with a model with an irr of 0.0188 and an nir of 189.45 on the test set.\n",
      "\n",
      " How did you do?\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.047619047619047616, 6.85)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This will test our results, and provide you back some information \n",
    "# on how well your promotion_strategy will work in practice\n",
    "\n",
    "test_results(promotion_strategy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"Part4Conc\"></a>\n",
    "### Model Conclusion\n",
    "\n",
    "Ha! So, we managed to get a better IRR but a signifigantly worse nir than the experts over at Udacity... Regardless, we still managed a signifigantly better approach than what we had observed with the experiment. \n",
    "\n",
    "Our confusion matrix indidcated that our accuracy is only hindered by a small number of false negatives. Prehaps if we had a less conservative model we may see a **higher NIR** rate. Allowing for a higher number of false positives may actually improve our NIR metric at the cost of our IRR. \n",
    "\n",
    "So to recap, \n",
    "- We trained our model on only those individuals in the experiment (i.e. they were offered the promotion)\n",
    "- Our model would than predict whether or not the individuals would purchase from the promotion offer based on the predicitor variables\n",
    "- We than tested our models NIR and IRR metrics using a local python script.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
